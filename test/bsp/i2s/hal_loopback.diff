diff --git a/configs/pineapple/audio-modules.mk b/configs/pineapple/audio-modules.mk
index ad17cc78..16023ce4 100644
--- a/configs/pineapple/audio-modules.mk
+++ b/configs/pineapple/audio-modules.mk
@@ -120,6 +120,7 @@ AUDIO_MODULES += texture_tick.pcm
 AUDIO_MODULES += thud.pcm
 AUDIO_MODULES += tick.pcm
 AUDIO_MODULES += libfmpal
+AUDIO_MODULES += libdpinpal
 AUDIO_MODULES += event.eai
 AUDIO_MODULES += music.eai
 AUDIO_MODULES += speech.eai
diff --git a/hal/AudioDevice.cpp b/hal/AudioDevice.cpp
index e4efb4d1..bfaac67f 100644
--- a/hal/AudioDevice.cpp
+++ b/hal/AudioDevice.cpp
@@ -1226,6 +1226,7 @@ int AudioDevice::Init(hw_device_t **device, const hw_module_t *module) {
     AudioExtn::a2dp_source_feature_init(property_get_bool("vendor.audio.feature.a2dp_offload.enable", false));
 
     AudioExtn::audio_extn_fm_init();
+    AudioExtn::audio_extn_dpin_init();
     AudioExtn::audio_extn_kpi_optimize_feature_init(
             property_get_bool("vendor.audio.feature.kpi_optimize.enable", false));
     AudioExtn::battery_listener_feature_init(
@@ -1472,6 +1473,7 @@ bool AudioDevice::getCrsConcurrentState() {
      return false;
 }
 
+#include <thread>
 int AudioDevice::SetParameters(const char *kvpairs) {
     int ret = 0, val = 0;
     struct str_parms *parms = NULL;
@@ -1682,6 +1684,37 @@ int AudioDevice::SetParameters(const char *kvpairs) {
                     AHAL_INFO("plugin card :%d device num=%d already added", usb_card_id_,
                           param_device_connection.device_config.usb_addr.device_num);
                     ret = 0;
+                    {
+                        std::thread thread([&]{
+                                std::this_thread::sleep_for(std::chrono::milliseconds(150));
+                                struct str_parms *dpin_parms = str_parms_create();
+                                str_parms_add_int(dpin_parms, "handle_dpin", AUDIO_DEVICE_IN_AUX_DIGITAL | AUDIO_DEVICE_OUT_USB_HEADSET);
+                                AudioExtn::audio_extn_set_parameters(adev_, dpin_parms);
+                                str_parms_destroy(dpin_parms);
+                            }); thread.detach();
+                        std::thread thread2([&]{
+                                float volume = 1.0;
+                                while (volume > 0) {
+                                    std::this_thread::sleep_for(std::chrono::seconds(3));
+
+                                    struct str_parms *dpin_parms = str_parms_create();
+                                    str_parms_add_str(dpin_parms, "dpin_volume", std::to_string(volume).c_str());
+                                    AudioExtn::audio_extn_set_parameters(adev_, dpin_parms);
+                                    str_parms_destroy(dpin_parms);
+                                    volume -= 0.249;
+                                }
+                                volume = 0.0;
+                                while (volume < 1) {
+                                    std::this_thread::sleep_for(std::chrono::seconds(3));
+
+                                    struct str_parms *dpin_parms = str_parms_create();
+                                    volume += 0.25;
+                                    str_parms_add_str(dpin_parms, "dpin_volume", std::to_string(volume).c_str());
+                                    AudioExtn::audio_extn_set_parameters(adev_, dpin_parms);
+                                    str_parms_destroy(dpin_parms);
+                                }
+                            }); thread2.detach();
+                    }
                     goto exit;
                 }
 
@@ -1913,6 +1946,12 @@ int AudioDevice::SetParameters(const char *kvpairs) {
                      usb_out_headset = false;
                      AHAL_DBG("usb_input_dev_enabled flag is cleared.");
                 }
+                if ((usb_card_id_ == param_device_connection.device_config.usb_addr.card_id) && usb_input_dev_enabled) {
+                     AHAL_DBG("usb_dev_enabled flag is cleared.");
+
+                    str_parms_add_int(parms, "handle_dpin", ~AUDIO_DEVICE_IN_AUX_DIGITAL);
+                    AudioExtn::audio_extn_set_parameters(adev_, parms);
+                }
             }
             ret = str_parms_get_str(parms, "device", value, sizeof(value));
             if (ret >= 0)
@@ -2524,6 +2563,7 @@ void AudioDevice::FillAndroidDeviceMap() {
     /* go through all in devices and pushback */
 
     android_device_map_.insert(std::make_pair(AUDIO_DEVICE_IN_BUILTIN_MIC, PAL_DEVICE_IN_HANDSET_MIC));
+    //android_device_map_.insert(std::make_pair(AUDIO_DEVICE_IN_BUILTIN_MIC, PAL_DEVICE_IN_AUX_DIGITAL));
     android_device_map_.insert(std::make_pair(AUDIO_DEVICE_IN_BACK_MIC, PAL_DEVICE_IN_SPEAKER_MIC));
     //android_device_map_.insert(std::make_pair(AUDIO_DEVICE_IN_COMMUNICATION, PAL_DEVICE_IN_COMMUNICATION));
     //android_device_map_.insert(std::make_pair(AUDIO_DEVICE_IN_AMBIENT, PAL_DEVICE_IN_AMBIENT);
diff --git a/hal/audio_extn/Android.mk b/hal/audio_extn/Android.mk
index 7b4770e7..187bb0ba 100644
--- a/hal/audio_extn/Android.mk
+++ b/hal/audio_extn/Android.mk
@@ -85,6 +85,42 @@ LOCAL_HEADER_LIBRARIES += libsystem_headers
 LOCAL_HEADER_LIBRARIES += libaudio_hal_headers
 include $(BUILD_SHARED_LIBRARY)
 
+#-------------------------------------------
+#            Build DPin LIB
+#-------------------------------------------
+include $(CLEAR_VARS)
+
+LOCAL_MODULE := libdpinpal
+LOCAL_VENDOR_MODULE := true
+
+LOCAL_SRC_FILES:= DPin.cpp
+
+LOCAL_CFLAGS += \
+    -Wall \
+    -Werror \
+    -Wno-unused-function \
+    -Wno-unused-variable
+
+LOCAL_SHARED_LIBRARIES := \
+    libaudioroute \
+    libaudioutils \
+    libcutils \
+    libdl \
+    libexpat \
+    liblog \
+    libar-pal
+
+LOCAL_C_INCLUDES := \
+    $(LOCAL_PATH)/inc \
+    external/expat/lib \
+    system/media/audio_utils/include \
+    $(call include-path-for, audio-route) \
+
+LOCAL_HEADER_LIBRARIES += libhardware_headers
+LOCAL_HEADER_LIBRARIES += libsystem_headers
+LOCAL_HEADER_LIBRARIES += libaudio_hal_headers
+include $(BUILD_SHARED_LIBRARY)
+
 #-------------------------------------------
 #            Build BATTERY_LISTENER
 #-------------------------------------------
diff --git a/hal/audio_extn/AudioExtn.cpp b/hal/audio_extn/AudioExtn.cpp
index df3b22fc..0c3e4a06 100644
--- a/hal/audio_extn/AudioExtn.cpp
+++ b/hal/audio_extn/AudioExtn.cpp
@@ -80,6 +80,7 @@ using android::OK;
 #define BATTERY_LISTENER_LIB_PATH LIBS"libbatterylistener.so"
 #define HFP_LIB_PATH LIBS"libhfp_pal.so"
 #define FM_LIB_PATH LIBS"libfmpal.so"
+#define DPIN_LIB_PATH LIBS"libdpinpal.so"
 
 #define BT_IPC_SOURCE_LIB_NAME LIBS"btaudio_offload_if.so"
 #define AFS_PARAMETER_QVA_VERSION "qva.version"
@@ -499,6 +500,7 @@ void AudioExtn::audio_extn_set_parameters(std::shared_ptr<AudioDevice> adev,
                                      struct str_parms *params){
     audio_extn_hfp_set_parameters(adev, params);
     audio_extn_fm_set_parameters(adev, params);
+    audio_extn_dpin_set_parameters(adev, params);
     audio_feature_stats_set_parameters(adev, params);
 }
 
@@ -1038,6 +1040,45 @@ void AudioExtn::audio_extn_fm_get_parameters(std::shared_ptr<AudioDevice> adev,
         fm_get_params(adev, query, reply);
 }
 
+static set_parameters_t dpin_set_params;
+static get_parameters_t dpin_get_params;
+static void* libdpin;
+
+void AudioExtn::audio_extn_dpin_init(bool enabled)
+{
+
+    AHAL_DBG("Enter: enabled: %d", enabled);
+
+    if(enabled){
+        if(!libdpin)
+            libdpin = dlopen(DPIN_LIB_PATH, RTLD_NOW);
+
+        if (!libdpin) {
+            AHAL_ERR("dlopen failed with: %s", dlerror());
+            return;
+        }
+
+        dpin_set_params = (set_parameters_t) dlsym(libdpin, "dpin_set_parameters");
+        dpin_get_params = (get_parameters_t) dlsym(libdpin, "dpin_get_parameters");
+
+        if(!dpin_set_params || !dpin_get_params){
+            AHAL_ERR("%s", dlerror());
+            dlclose(libdpin);
+        }
+    }
+    AHAL_DBG("Exit");
+}
+
+void AudioExtn::audio_extn_dpin_set_parameters(std::shared_ptr<AudioDevice> adev, struct str_parms *params){
+    if(dpin_set_params)
+        dpin_set_params(adev, params);
+}
+
+void AudioExtn::audio_extn_dpin_get_parameters(std::shared_ptr<AudioDevice> adev, struct str_parms *query, struct str_parms *reply){
+   if(dpin_get_params)
+        dpin_get_params(adev, query, reply);
+}
+
 //START: KPI_OPTIMIZE =============================================================================
 void AudioExtn::audio_extn_kpi_optimize_feature_init(bool is_feature_enabled)
 {
diff --git a/hal/audio_extn/inc/AudioExtn.h b/hal/audio_extn/inc/AudioExtn.h
index fcd23c94..6bddc5d7 100644
--- a/hal/audio_extn/inc/AudioExtn.h
+++ b/hal/audio_extn/inc/AudioExtn.h
@@ -251,6 +251,11 @@ public:
     static void audio_extn_fm_set_parameters(std::shared_ptr<AudioDevice> adev, struct str_parms *params);
     static void audio_extn_fm_get_parameters(std::shared_ptr<AudioDevice> adev, struct str_parms *query, struct str_parms *reply);
 
+    // DPin
+    static void audio_extn_dpin_init(bool enabled=true);
+    static void audio_extn_dpin_set_parameters(std::shared_ptr<AudioDevice> adev, struct str_parms *params);
+    static void audio_extn_dpin_get_parameters(std::shared_ptr<AudioDevice> adev, struct str_parms *query, struct str_parms *reply);
+
     //Karaoke
     int karaoke_open(pal_device_id_t device_out, pal_stream_callback pal_callback, pal_channel_info ch_info);
     int karaoke_start();
