http://aospxref.com/android-14.0.0_r2/xref/hardware/interfaces/automotive/audiocontrol/2.0/default/Android.bp

android.hardware.automotive.audiocontrol@2.0-service
http://aospxref.com/android-14.0.0_r2/xref/frameworks/av/services/audiopolicy/engineconfigurable/sepolicy/audioserver.te
http://aospxref.com/android-14.0.0_r2/xref/frameworks/av/services/audiopolicy/engineconfigurable/sepolicy/file_contexts
/dev/socket/audioserver(/.*)?    u:object_r:audioserver_socket:s0

build/release/build_flags.bzl 中定义的 RELEASE_AIDL_USE_UNFROZEN 标志用于控制此行为。true 表示在运行时使用的是接口的未冻结版本，false 表示未冻结版本的库的行为都与上一个冻结版本的行为类似。对于本地开发，您可以将该标志替换为 true，但在发布之前必须将其还原为 false。通常，您将通过将标志设置为 true 的配置来完成开发。

例如，添加未冻结的版本 4 时，请使用 <version>3-4</version>。

https://source.android.com/docs/core/architecture/aidl/stable-aidl?hl=zh-cn
如果声明一个名为 foo 的模块，则同时也会在构建系统中创建一个目标，您可以用该目标管理该模块的 API。构建后，foo-freeze-api 会在 api_dir 或 aidl_api/name 下（因 Android 版本而异）添加新的 API 定义，并添加一个 .hash 文件，二者均表示接口的新冻结版本。foo-freeze-api 还会更新 versions_with_info 属性以反映其他版本以及该版本的 imports。

AIDL 接口 IFACE 版本 V 的定义位于 aidl_api/IFACE/V。此字段是在 Android 13 中引入的，不应直接在 Android.bp 中修改。通过调用 *-update-api 或 *-freeze-api 添加或更新此字段。此外，当用户调用 *-update-api 或 *-freeze-api 时，versions 字段会自动迁移到 versions_with_info。
source <项目位置>/build/envsetup.sh
lunch 项目名-userdebug
m vendorabcd.hardware.sensorscalibrate-update-api //复制现在的版本到aidl_api/current
m vendorabcd.hardware.sensorscalibrate-freeze-api //从current生成一个新的版本（号）
https://blog.csdn.net/weixin_60253080/article/details/127810200

添加以后：使用如下指令编译模块
mmm /frameworks/libs/net/common/netd
报错提示说需要更新api:
API dump for the current version of AIDL interface setHardwareAddress does not exist.
Run m netd_aidl_interface-update-api or add unstable: true to the build rule for the interface if it does not need to be versioned
我们按照提示更新api:
make netd_aidl_interface-update-api 更新当前api 此命令执行成会更新如下目录下的aidl文件
QSSI.13\frameworks\libs\net\common\netd\aidl_api\netd_aidl_interface\current
因为我们是在原来的aidl文件内新增的接口， 所以我们需要使用如下指令重新生成一个version 的api
make netd_aidl_interface-freeze-api 此命令会生成新的版本号的api:之前最大是10，更新以后多了11
https://blog.csdn.net/androidzmm/article/details/134524702

https://source.android.com/docs/core/architecture/hidl/hashing?hl=zh-cn
使用 hidl-gen 添加哈希

https://source.android.com/docs/core/architecture/partitions?hl=zh-tw
该文档解释了Android系统的不同分区，包括system、vendor、product等分区的功能、目的及权限限制。

https://blog.51cto.com/u_12187/6608796
https://zenki2001cn.github.io/Wiki/Android/socket%E9%80%9A%E8%AE%AF.html


int s = android_get_control_socket(service);
4253      if (s < 0) {
4254          MYLOGE("android_get_control_socket(%s): %s\n", service, strerror(errno));
4255          return -1;
4256      }
4257      fcntl(s, F_SETFD, FD_CLOEXEC);
4258
4259      // Set backlog to 0 to make sure that queue size will be minimum.
4260      // In Linux, because the minimum queue will be 1, connect() will be blocked
4261      // if the other clients already called connect() and the connection request was not accepted.
4262      if (listen(s, 0) < 0) {
4263          MYLOGE("listen(control socket): %s\n", strerror(errno));
4264          return -1;
4265      }
4266
4267      struct sockaddr addr;
4268      socklen_t alen = sizeof(addr);
4269      int fd = accept4(s, &addr, &alen, SOCK_CLOEXEC);


http://aospxref.com/android-14.0.0_r2/xref/frameworks/native/libs/vr/libpdx_uds/service_endpoint.cpp
http://aospxref.com/android-14.0.0_r2/xref/frameworks/av/media/libstagefright/rtsp/ARTPWriter.cpp
http://aospxref.com/android-14.0.0_r2/xref/frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp
http://aospxref.com/android-14.0.0_r2/xref/frameworks/av/media/libmediaplayerservice/fuzzer/mediarecorder_fuzzer.cpp
