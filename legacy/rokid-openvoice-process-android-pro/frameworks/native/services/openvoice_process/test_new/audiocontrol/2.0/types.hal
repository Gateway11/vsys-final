/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.automotive.audiocontrol@2.0;

/**
 * Changes in audio focus that can be experienced
 */
enum AudioFocusChange : int32_t {
    NONE = 0,
    GAIN = 1,
    GAIN_TRANSIENT = 2,
    GAIN_TRANSIENT_MAY_DUCK = 3,
    GAIN_TRANSIENT_EXCLUSIVE = 4,
    LOSS = -1 * GAIN,
    LOSS_TRANSIENT = -1 * GAIN_TRANSIENT,
    LOSS_TRANSIENT_CAN_DUCK = -1 * GAIN_TRANSIENT_MAY_DUCK,
};

struct MutingInfo {
    /**
     * ID of the associated audio zone
     */
    int32_t zoneId;

    /**
     * List of addresses for audio output devices that should be muted.
     *
     * <p>The provided address uint8_ts are defined in audio_policy_configuration.xml.
     */
    string[6] deviceAddressesToMute;

    /**
     * List of addresses for audio output devices that were previously be muted and should now be
     * unmuted.
     *
     * <p>The provided address uint8_ts are defined in audio_policy_configuration.xml.
     */
    string[6] deviceAddressesToUnmute;
};

struct DuckingInfo {
    /**
     * ID of the associated audio zone
     */
    int32_t zoneId;

    /**
     * List of addresses for audio output devices that should be ducked.
     *
     * <p>The provided address uint8_ts are defined in audio_policy_configuration.xml.
     */
    string[6] deviceAddressesToDuck;

    /**
     * List of addresses for audio output devices that were previously be ducked and should now be
     * unducked.
     *
     * <p>The provided address uint8_ts are defined in audio_policy_configuration.xml.
     */
    string[6] deviceAddressesToUnduck;

    /**
     * List of usages currently holding focus for this audio zone.
     *
     * <p> See {@code audioUsage} in audio_policy_configuration.xsd for the list of allowed values.
     */
    string[6] usagesHoldingFocus;
};

enum AudioCommandType : uint32_t {
    UNKNOWN,
    GEQ,
    FIELD,
    SURROUND,
    RESTORE,
    DTS,
};

enum AudioGeqType : uint32_t {
    UNKNOWN,
    EFFECT_TYPE,
    FREQUENCY_INDEX,
    CLOSE,
    MAX,
};

struct AudioParamEqExt {
    AudioGeqType type;
    string eqEffectType;
    int32_t frequencyIdx;
};

struct AudioParamConfig {
    AudioParamEqExt equalizer;
    uint8_t[16] extraData;
    AudioCommandType command;
    uint8_t extraDataLen;
    int8_t values;
};
